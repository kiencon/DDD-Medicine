// <auto-generated />
using System;
using DDD.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DDD.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20231115200218_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("medicine")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DDD.Domain.Aggregate.Formula", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("Formula", "medicine");
                });

            modelBuilder.Entity("DDD.Domain.Aggregate.RawMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RawMaterial", "medicine");
                });

            modelBuilder.Entity("DDD.Domain.ValueObjects.Formula.FormulaMessurementVO", b =>
                {
                    b.Property<Guid>("FormulaMessurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FormulaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FormulaMessurementId");

                    b.HasIndex("FormulaId")
                        .IsUnique();

                    b.ToTable("FormulaMessurement", "medicine");
                });

            modelBuilder.Entity("DDD.Domain.ValueObjects.Formula.MedicineVO", b =>
                {
                    b.Property<Guid>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicine", "medicine");
                });

            modelBuilder.Entity("DDD.Domain.ValueObjects.Formula.RawMaterialRatioVO", b =>
                {
                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormulaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("RawMaterialId", "FormulaId");

                    b.HasIndex("FormulaId");

                    b.ToTable("RawMaterialRatio", "medicine");
                });

            modelBuilder.Entity("DDD.Domain.Aggregate.Formula", b =>
                {
                    b.HasOne("DDD.Domain.ValueObjects.Formula.MedicineVO", "_medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("DDD.Domain.ValueObjects.Formula.FormulaDataVO", "_formulaData", b1 =>
                        {
                            b1.Property<Guid>("FormulaId")
                                .HasColumnType("uuid");

                            b1.Property<int>("FormulaForm")
                                .HasColumnType("integer")
                                .HasColumnName("FormulaForm");

                            b1.Property<int>("FormulaSample")
                                .HasColumnType("integer")
                                .HasColumnName("FormulaSample");

                            b1.HasKey("FormulaId");

                            b1.ToTable("Formula", "medicine");

                            b1.WithOwner()
                                .HasForeignKey("FormulaId");
                        });

                    b.Navigation("_formulaData");

                    b.Navigation("_medicine");
                });

            modelBuilder.Entity("DDD.Domain.Aggregate.RawMaterial", b =>
                {
                    b.OwnsOne("DDD.Domain.ValueObjects.RawMaterial.RawMaterialDataVO", "_rawMaterialData", b1 =>
                        {
                            b1.Property<Guid>("RawMaterialId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Name");

                            b1.Property<int>("RawMaterialStatus")
                                .HasColumnType("integer")
                                .HasColumnName("Status");

                            b1.HasKey("RawMaterialId");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("RawMaterial", "medicine");

                            b1.WithOwner()
                                .HasForeignKey("RawMaterialId");
                        });

                    b.Navigation("_rawMaterialData");
                });

            modelBuilder.Entity("DDD.Domain.ValueObjects.Formula.FormulaMessurementVO", b =>
                {
                    b.HasOne("DDD.Domain.Aggregate.Formula", null)
                        .WithOne("_formulaMessurement")
                        .HasForeignKey("DDD.Domain.ValueObjects.Formula.FormulaMessurementVO", "FormulaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DDD.Domain.ValueObjects.Formula.RawMaterialRatioVO", b =>
                {
                    b.HasOne("DDD.Domain.Aggregate.Formula", null)
                        .WithMany("_rawMaterialRatios")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DDD.Domain.Aggregate.Formula", b =>
                {
                    b.Navigation("_formulaMessurement");

                    b.Navigation("_rawMaterialRatios");
                });
#pragma warning restore 612, 618
        }
    }
}
